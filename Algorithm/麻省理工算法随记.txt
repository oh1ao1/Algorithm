算法分析是重要的：根据theta(n^2)过了n_0之后优于theta(n^3)，但是n_0不一定是可以接受的，所以我们也对一些效率较低的算法感兴趣
【排序】插入排序在30个以下是可以使用的，但是过了30个以上就比较低效率了。
【方阵相乘】Strassen方法一般需要n超过32才看得出比普通矩阵相乘快

分治法：Divide & Conquer (&Combine)
分治法主要三步是：一分二治三合并，通过Master Method可以领悟分治法的思想，并且加以应用。
分治和递归有比较紧密的联系，解递归的三种方法分别是：
1、代换法
2、递归树法
3、主方法
其中主方法的限制必须警惕，尤其是f(n)的渐近趋正性，拿捏不准时就使用递归树法 + 代换法验证吧。

分治策略中几个比较有代表性的算法是：
1、归并排序
2、二分查找
3、乘方计算
4、Fibonacci（仅仅是理论上，目前的机器无法实现）
5、矩阵相乘（但是仅仅是分治并不能减少运行时间，需要使用Strassen算法）
6、*VLSI超大规模集成芯片的布线思想

同时还需要注意算法分析递归式子时，“XX级数”知识的运用！