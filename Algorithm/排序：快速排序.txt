快速排序的思想很简单，其实就是随机选定一个元素，将比它小的放它前面，比它大或者等于它的放它后面。
然后将被这个元素分开的两边做同样的事情。

快速排序也是使用分治策略，分治策略就涉及了递归，所以可以使用解递归的方法来分析它的运行时间。
每次选择的元素恰好能将整个序列二分是最好的，即分为2个规模为n/2的子问题，可以得到theta(nlgn)
但是如果分出来的两边一边有元素、一边没有，即分为1个规模为0、一个规模为n - 1的子问题，那么就导致同规模子问题的出现，分治将十分的慢，运行时间是theta(n^2)。
因此，已经排好序（无论是顺序还是逆序），都会使快速排序的效率变低。

*还有一次最好一次最差的情况，和一般的情况，这两种情况都是theta(nlgn)，这里就不赘述了。

所以优化快排的关键在于不要出现已经排好序的情况，主要有两种方法：
1、随机化序列（也就是打乱数组）
2、随机选定主元，不要固定选择首位（在编码中，可以将首位和随机位置交换）
增加了随机化的快排，称为randomized quicksort，就是随机化快速排序

快排还有其它优化手段比如：
1、剩下元素不多时改用其它方法，因为递归在机器中的开销比较大。
2、尾递归优化？？？