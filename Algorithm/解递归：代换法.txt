解递归：
1、代换法：先假设值，然后使用数学归纳法验证。
	T(n) = { 
		 O(1), if n = 1
		 4 * T(n/2) + n , otherwise 
		}
	
	（1）假设T(n) = O(n^3)	（此处不可以使用O(n^3)，必须使用大O的数学定义。）  因此应该假设T(n) <= c * n^3
	（2）忽略O（1）情况（通常不考虑常数）
	（3）由于T(n) <= c * n^3
		 T(n) = 4 * T(n/2) + n，可以得出：
		T(n) <= 4 * (c * (n/2)^3) + n
		     <= c * n^3 * 1/2 + n
		     <= c * n^3 - (1/2 * c * n^3 - n)
			为了保证T(n)一定小于c * n^3，必须保证后半部分(1/2 * c * n^3 - n)非负
			由于存在c（比如2）使得后半部分非负，所以证明是成立的
	    因此T(n) = O(n^3)	（但是这并非紧凑渐近上界）

	（代换法用于验证正确性比较合适）