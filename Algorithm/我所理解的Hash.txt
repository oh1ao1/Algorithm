Hash表是直接映射表的改进，直接映射表虽然支持dynamic set的几种操作（Insert、Delete、Search）时间复杂度都是O(1)，但是消耗的空间过于庞大，比如64位的数据需要消耗2^64个内存空间
Hash表是Key――>Hash――>Satellite Data

Hash表的主要问题是：
1、Hash函数
2、Collision，碰撞问题：即是两个key被映射为相同的Hash值

对于第一个问题【Hash函数】，常用的Hash函数有：
	(a)Division Method(除法)：
		h(k) = k mod m;
	* m的选择不能太小。(如果key的特征是都是偶数，而m是2，那么槽可能会浪费一半)
	* m最好不要选择2或10的幂，对2^r进行mod，实质上就是取 k 的后面 r 位，这样子key的前面部分无法参与。
	* 最好使用质数作为m的值！


	(b)Mutiplication Method(乘法：比除法快一点)：
		h(k) = (A * k mod 2^w) >> (w - r)
	* w是计算机的字长
	* A应该选择odd奇数，同时要求2^(w - 1) < A < 2^w
	* m = 2^r


对于第2个问题【Collision】，解决方法有：
	(a)链接法：对于碰撞的key，将它们连成一个链表。
		链接法可能会造成所有key都连成一个链表(最坏情况)，此时dynamic set的操作时间是O(n)
	(b)Open addressing(开放寻址法)
		发生碰撞时，想办法重新映射一次，形成一个探查序列。
		这种方法要求n <= m，即key的数量必须小于槽的数量
		当然，重新映射的方法也有多种：
			1.线性探查：
				h(k,i) = (h(k, 0) + i) mod m;
			2.double hashing：使用两个Hash函数：
				h(k) = (h1(k) + i * h2(k)) mod m;
				
				第一次探查碰撞的概率是: n / m(m个槽有n个key)
				第二次探查碰撞的概率是：(n - 1) / (m - 1)，由于第一次已经被排除在外了。


	开放寻址法的dynamic set操作期望时间是 1 / (1 - 装载因子)，装载因子 = n / m；
	装载因子不能过高(即hash表的利用率不能太高)，否则探查次数会大大增加。